# coding: utf-8
# coding: utf-8

import sys

print('Number of arguments:', len(sys.argv), 'arguments.')
print('Argument List:', str(sys.argv))


path1 = str(sys.argv[1])
#path1 = "hou-mix-pos-1.xyz"
print(f"Path to trajectory: {path1}")

noa = int(path1[2:4]) * 4 *2
print(f"number of atoms: {noa}")

import numpy as np
#target_coord = np.loadtxt("q16_1.xyz", skiprows=2, usecols=(1,2,3))
#target_coord = np.loadtxt("PolyQ16_grdConfig_2m.xyz", skiprows=2, usecols=(1,2,3))
target_coord = np.loadtxt(path1, skiprows=2, usecols=(1,2,3), max_rows = noa)
#target_coord[64:,:] = target_coord[64:,:] + np.array([30,0,0])
#target_atoms_raw =  np.loadtxt("q16_1.xyz", dtype = 'S20',  skiprows=2, usecols=(0))
#target_atoms_raw =  np.loadtxt("PolyQ16_grdConfig_2m.xyz", dtype = 'S20',  skiprows=2, usecols=(0))
target_atoms_raw =  np.loadtxt(path1, dtype = 'S20',  skiprows=2, usecols=(0), max_rows = noa)
from trajec_io import readwrite
target_atoms = []
for   i in target_atoms_raw:
    target_atoms.append(str(i)[5])
target_atoms = np.array(target_atoms)
pbc = np.eye(3)*100
from trajec_io import readwrite

readwrite.easy_write(np.array([target_coord]), target_atoms, "ref_print2.xyz")

coord_N = target_coord[target_atoms == "N",:]
coord_O = target_coord[target_atoms == "O",:]
coord_R = target_coord[target_atoms == "R",:]
coord_C = target_coord[target_atoms == "C",:]
final1  = np.copy(target_coord)
final_atom = np.copy(target_atoms)
pdb_atom_xyz_list = list(final_atom)
pdb_coord_list = list(final1)
 
 
    
pdb_number_list = []
for i in range(len(pdb_coord_list)):
    pdb_number_list.append(i+1)
pdb_resid_list = []    
j = 0
for i in range(len(pdb_coord_list)):
    if i % 4 == 0:
        j += 1
    pdb_resid_list.append(j)
pdb_chain_list = []
j = 0
for i in range(len(pdb_coord_list)): 
    if i % int(noa/2)  == 0:
        j += 1
    pdb_chain_list.append(j)
   
 
    
    
pdb_atom_ff_list = []
for i, type1 in enumerate(pdb_atom_xyz_list):
#    print(i,type1)
     if type1 == "C":
         pdb_atom_ff_list.append("CA")
     elif type1 == "O":
         pdb_atom_ff_list.append("C")
     else:
         pdb_atom_ff_list.append(type1)
         
    
#for i in range(len(pdb_coord_list)):
#    print(pdb_atom_ff_list[i], pdb_atom_xyz_list[i], pdb_number_list[i], pdb_resid_list[i], pdb_chain_list[i], pdb_coord_list[i])
    

def easy_write_pbc(pdb_atom_ff_list, pdb_number_list, pdb_resid_list, pdb_chain_list, pdb_coord_list, pdb_atom_xyz_list,  filename, append = False):
  if append:
    open_option = 'a'
  else:
    open_option = 'w'
  with open(filename, open_option) as the_file:
      
      #for i in range(xyz.shape[0]):
      #    the_file.write(str(xyz.shape[1]) + '\n')
      #    the_file.write('\n')
      the_file.write('COMPND    XYZ file generated by Avogadro. \n')
      the_file.write('AUTHOR    GENERATED BY OPEN BABEL 3.0.0 \n')
      for j in range(len(pdb_coord_list)):
              if pdb_chain_list[j] == 1:
                  chain = 'A'
              if pdb_chain_list[j] == 2:
                  chain = 'B'
              #the_file.write('%s  %f   %f   %f \n' % (atoms[j], xyz[i,j,0], xyz[i,j,1],xyz[i,j,2]) )
              #the_file.write('ATOM %i  %s  GLN A  %i   %f  %f  %f \n' % (pdb_number_list[j], pdb_atom_ff_list[j], pdb_resid_list[j], pdb_coord_list[j][0], pdb_coord_list[j][1], pdb_coord_list[j][2]) )
              the_file.write(f'ATOM  {pdb_number_list[j]:5d}  {pdb_atom_ff_list[j]:4}GLN {chain:1}{pdb_resid_list[j]:4d}    {pdb_coord_list[j][0]:8.3f}{pdb_coord_list[j][1]:8.3f}{pdb_coord_list[j][2]:8.3f}  1.00  0.00           {pdb_atom_xyz_list[j]:2}\n')
      the_file.write('END \n')


















#pdb_name_list_R_opt = ["HG1", "CD", "HE21", "NE2", "HB1", "CG", "HE22", "CB", "OE1", "HG2", "HB2"]
#len(pdb_name_list_R_opt)
from scipy.spatial.transform import Rotation as R
coord_r_opt, atom_r_opt = readwrite.easy_read("R_opt.xyz", pbc)
coord_r_opt *= 0.85
com = readwrite.get_com(coord_r_opt, atom_r_opt , pbc)
diff_vec =  coord_r_opt[0,7,:] - com
pdb_name_list_R_opt = ["HG1", "CD", "HE21", "NE2", "HB1", "CG", "HE22", "CB", "OE1", "HG2", "HB2"]
xyz_name_list_R_opt = ["H", "C", "H", "N", "H", "C", "H", "C", "O", "H", "H"]
#len(xyz_name_list_R_opt)
#xyz_name_list_R_opt
#atom_r_opt
#list(atom_r_opt)
#xyz_name_list_R_opt


final_pdb_atom_ff_list = []
final_pdb_atom_xyz_list = [] 
final_pdb_number_list = [] 
final_pdb_resid_list = [] 
final_pdb_chain_list = []
final_pdb_coord_list = []

curr_number = 0
for i in range(len(pdb_coord_list)):
    if pdb_atom_xyz_list[i] == "N" or pdb_atom_xyz_list[i] == "C" or pdb_atom_xyz_list[i] == "O":
        final_pdb_atom_ff_list.append(pdb_atom_ff_list[i])
        final_pdb_atom_xyz_list.append(pdb_atom_xyz_list[i])
        #final_pdb_number_list.append(pdb_number_list[i])
        final_pdb_resid_list.append(pdb_resid_list[i])
        final_pdb_chain_list.append(pdb_chain_list[i])
        final_pdb_coord_list.append(pdb_coord_list[i])
        curr_number += 1
        final_pdb_number_list.append(curr_number)
    if pdb_atom_xyz_list[i] == "N":
        #for i in coord_N:
        ind1, dist1 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_O, pbc)
        ind2, dist2 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_C, pbc)
        if (dist1 < 2.0)  and (dist2  <2.0):
            ini1 = (coord_O[ind1] + coord_C[ind2])/2
            h_pos = (pdb_coord_list[i] - ini1)*2 + ini1
            final_pdb_atom_ff_list.append("H")          
            final_pdb_atom_xyz_list.append("H")
            final_pdb_resid_list.append(pdb_resid_list[i])
            final_pdb_chain_list.append(pdb_chain_list[i])
            final_pdb_coord_list.append(h_pos[0])
            curr_number += 1
            final_pdb_number_list.append(curr_number)
    if pdb_atom_xyz_list[i] == "O":
        ind1, dist1 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_N, pbc)
        ind2, dist2 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_C, pbc)
    #print(dist1, dist2)
        if (dist1 < 2.0)  and (dist2  <2.0):
        #if (dist1 < 2.0):
        #print(dist1, dist2)
            ini1 = (coord_N[ind1] + coord_C[ind2])/2
            h_pos = (pdb_coord_list[i] - ini1)*2.25 + ini1
            final_pdb_atom_ff_list.append("O")          
            final_pdb_atom_xyz_list.append("O")
            final_pdb_resid_list.append(pdb_resid_list[i])
            final_pdb_chain_list.append(pdb_chain_list[i])
            final_pdb_coord_list.append(h_pos[0])
            curr_number += 1
            final_pdb_number_list.append(curr_number)
        if (dist1 > 2.0) and (dist2  <2.0) :
            ini1 = (pdb_coord_list[i] - coord_C[ind2])/2
            x = np.random.randn(3)
            x -= x.dot(ini1[0]) * ini1[0]
            x /= np.linalg.norm(x)
            h_pos1 = pdb_coord_list[i] + x
            h_pos2 = pdb_coord_list[i]  -x
            final_pdb_atom_ff_list.append("O")
            final_pdb_atom_xyz_list.append("O")
            final_pdb_resid_list.append(pdb_resid_list[i])
            final_pdb_chain_list.append(pdb_chain_list[i])
            final_pdb_coord_list.append(h_pos1)
            curr_number += 1
            final_pdb_number_list.append(curr_number)
            final_pdb_atom_ff_list.append("OC2")
            final_pdb_atom_xyz_list.append("O")
            final_pdb_resid_list.append(pdb_resid_list[i])
            final_pdb_chain_list.append(pdb_chain_list[i])
            final_pdb_coord_list.append(h_pos2)
            curr_number += 1        
            final_pdb_number_list.append(curr_number)

    
    if pdb_atom_xyz_list[i] == "C":
        ind1, dist1 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_N, pbc)
        ind2, dist2 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_O, pbc)
        ind3, dist3 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_R, pbc)
        ini1 = (coord_N[ind1] + coord_O[ind2])/2
        ini2 = ([pdb_coord_list[i]] - coord_R[ind3])*0.1
        h_pos = ([pdb_coord_list[i]] - ini1)*2 + ini1 + ini2
        final_pdb_atom_ff_list.append("HA")          
        final_pdb_atom_xyz_list.append("H")
        final_pdb_resid_list.append(pdb_resid_list[i])
        final_pdb_chain_list.append(pdb_chain_list[i])
        final_pdb_coord_list.append(h_pos[0])
        curr_number += 1
        final_pdb_number_list.append(curr_number)
    if pdb_atom_xyz_list[i] == "R":
        ind1, dist1 = readwrite.next_neighbor2([pdb_coord_list[i]], coord_C, pbc)
        diff_vec_ref = coord_C[ind1] - [pdb_coord_list[i]]
        rot, tmp = R.align_vectors(diff_vec_ref, diff_vec)
        new_coord = rot.apply(coord_r_opt[0])
        for j in range(len(atom_r_opt)):
            curr_number += 1
            final_pdb_number_list.append(curr_number)
            #pdb_name_list_R_opt = ["HG1", "CD", "HE21", "NE2", "HB1", "CG", "HE22", "CB", "OE1", "HG2", "HB2"]
            #xyz_name_list_R_opt = ["H", "C", "H", "N", "H", "C", "H", "C", "O", "H", "H"]
            final_pdb_atom_ff_list.append(pdb_name_list_R_opt[j])
            final_pdb_atom_xyz_list.append(atom_r_opt[j])
            final_pdb_resid_list.append(pdb_resid_list[i])
            final_pdb_chain_list.append(pdb_chain_list[i])
            final_pdb_coord_list.append(new_coord[j]+ pdb_coord_list[i])


filename = "first_pbd.pdb"
easy_write_pbc(final_pdb_atom_ff_list, final_pdb_number_list, final_pdb_resid_list, final_pdb_chain_list, final_pdb_coord_list, final_pdb_atom_xyz_list,  filename)
